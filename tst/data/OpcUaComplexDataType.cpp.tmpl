/*
   Copyright 2017 Kai Huebl (kai@huebl-sgh.de)

   Lizenziert gemäß Apache Licence Version 2.0 (die „Lizenz“); Nutzung dieser
   Datei nur in Übereinstimmung mit der Lizenz erlaubt.
   Eine Kopie der Lizenz erhalten Sie auf http://www.apache.org/licenses/LICENSE-2.0.

   Sofern nicht gemäß geltendem Recht vorgeschrieben oder schriftlich vereinbart,
   erfolgt die Bereitstellung der im Rahmen der Lizenz verbreiteten Software OHNE
   GEWÄHR ODER VORBEHALTE – ganz gleich, ob ausdrücklich oder stillschweigend.

   Informationen über die jeweiligen Bedingungen für Genehmigungen und Einschränkungen
   im Rahmen der Lizenz finden Sie in der Lizenz.

   Autor: Kai Huebl (kai@huebl-sgh.de)
 */

#include "@ProjectNamespace@/@ProjectFolder@/@ClassName@.h"

namespace @ProjectNamespace@
{

	@ClassName@::@ClassName@(void)
	: Object()
	, ExtensionObjectBase()
@ValuesInit@
	{
	}

	@ClassName@::~@ClassName@(void)
	{
	}

	ExtensionObjectBase::SPtr
	@ClassName@::factory(void)
	{
		@ClassName@::SPtr @className@ = constructSPtr<@ClassName@>();
		return @className@;
	}

	OpcUaNodeId
	@ClassName@::binaryTypeId(void)
	{
		return OpcUaNodeId(@BinaryTypeId@);
	}

	OpcUaNodeId
	@ClassName@::xmlTypeId(void)
	{
		return OpcUaNodeId(@XmlTypeId@);
	}

	void
	@ClassName@::opcUaBinaryEncode(std::ostream& os) const
	{
@ValuesEncode@
	}

	void
	@ClassName@::opcUaBinaryDecode(std::istream& is)
	{
@ValuesDecode@
	}

	bool
	@ClassName@::encode(boost::property_tree::ptree& pt, Xmlns& xmlns) const
	{
		return false;
	}

	bool
	@ClassName@::decode(boost::property_tree::ptree& pt, Xmlns& xmlns)
	{
		return false;
	}

	void
	@ClassName@::copyTo(ExtensionObjectBase& extensionObjectBase)
	{
		@ClassName@* dst = dynamic_cast<@ClassName@*>(&extensionObjectBase);
		copyTo(*dst);
	}

	bool
	@ClassName@::equal(ExtensionObjectBase& extensionObjectBase) const
	{
		@ClassName@* dst = dynamic_cast<@ClassName@*>(&extensionObjectBase);
		return *this == *dst;
	}

	void
	@ClassName@::out(std::ostream& os)
	{
@ValuesOut@
	}

	void
	@ClassName@::copyTo(@ClassName@& @className@)
	{
@ValuesCopyTo@
	}

	bool
	@ClassName@::operator==(const @ClassName@& @className@) const
	{
		@ClassName@* ptr = const_cast<@ClassName@*>(&@className@);
		bool rc = true;

@ValuesEqual@

		return rc;
	}

}


